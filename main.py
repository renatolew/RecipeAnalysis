import csv
import json
import re

from collections import Counter
from nltk.corpus import stopwords

#opening the json file in python
f = open("recipes_raw_nosource_combined.json",)

#storing the json data in a python variable as a dictionary.
data = json.load(f)

#creating a list variable to store the ingredients for each recipe in the dictionary generated by the json file.
data_ingredients = []
data_skills = []

#creating a for loop to store the ingredients in the variable data_ingredients for each recipe.
for i in data:
    data_dict = data[i].items()
    for key, value in data_dict:
        if key == "ingredients":
            data_ingredients.append(value)

#creating a for loop to store the instructions in the variable data_skills for each recipe.
for i in data:
    data_dict = data[i].items()
    for key, value in data_dict:
        if key == "instructions":
            data_skills.append(value)


#converting the ingredients list to a string to split it into separate words and count them.
ingredients_list = str(data_ingredients)
split_it_ingredients = ingredients_list.split()
words_counter_ingredients = Counter(split_it_ingredients)
most_occurred_ingredients = dict(words_counter_ingredients.most_common(300))

#converting the instructions list to a string to split it into separate words and count them.
skills_list = str(data_skills)
split_it_skills = skills_list.split()
words_counter_skills = Counter(split_it_skills)
most_occurred_skills = dict(words_counter_skills.most_common(300))

#printing a list with each word and its occurrence.
print(most_occurred_ingredients)
print(most_occurred_skills)


#closing the json file to prevent disasters.
f.close

#defining all stopwords in a variable to be filtered.
stop_words = stopwords.words("english")

#defining a function to check if a string had numbers in order to filter out the dictionary keys that are only a number.
def hasNumbers(inputString):
     return bool(re.search(r'\d', inputString))


#deleting all dictionary items that have a stopword as key for the ingredients dict.
delete_ingredients = [key for key in most_occurred_ingredients if key in stop_words]
for key in delete_ingredients: del most_occurred_ingredients[key]
#deleting all dictionary items that have a number as key for the ingredients dict.
delete_numerical_ingredients = [key for key in most_occurred_ingredients if hasNumbers(key) == True]
for key in delete_numerical_ingredients: del most_occurred_ingredients[key]

#deleting all dictionary items that have a stopword as key for the skills dict.
delete_skills = [key for key in most_occurred_skills if key in stop_words]
for key in delete_skills: del most_occurred_skills[key]
#deleting all dictionary items that have a number as key for the skills dict.
delete_numerical_skills = [key for key in most_occurred_skills if hasNumbers(key) == True]
for key in delete_numerical_skills: del most_occurred_skills[key]


print(most_occurred_ingredients)
print(len(most_occurred_ingredients))

#printing the lenght of each new dictionary in order to check how many keys have been removed form the original 300.
print(most_occurred_skills)
print(len(most_occurred_skills))


#creating lists to serve as input when exporting the data to a .csv file for ingredients.
header_csv_ingredients = list(most_occurred_ingredients.keys())
data_csv_ingredients = list(most_occurred_ingredients.values())

#opening the .csv file and writing the ingredients as the header and the occurrences as the data.
#using the w+ in second argument to truncate the file and delete all previous content before writing the data.
with open('ingredients.csv', 'w+', encoding='UTF8', newline='') as f_i:
    writer = csv.writer(f_i)

    #writing the header with each key
    writer.writerow(header_csv_ingredients)

    #writing the data with each value
    writer.writerow(data_csv_ingredients)



#creating lists to serve as input when exporting the data to a .csv file for skills.
header_csv_skills = list(most_occurred_skills.keys())
data_csv_skills = list(most_occurred_skills.values())

#opening the .csv file and writing the skills as the header and the occurrences as the data.
#using the w+ in second argument to truncate the file and delete all previous content before writing the data.
with open('skills.csv', 'w+', encoding='UTF8', newline='') as f_s:
    writer = csv.writer(f_s)

    #writing the header with each key
    writer.writerow(header_csv_skills)

    #writing the data with each value
    writer.writerow(data_csv_skills)